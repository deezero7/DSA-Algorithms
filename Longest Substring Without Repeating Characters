//#include<bits/stdc++.h>
#include<iostream>
#include<string>
#include<unordered_set>


class Solution {
public:
    int lengthOfLongestSubstring(std::string s) {
        
        std::unordered_set<char> set;
    
        int i = 0, j = 0, n = s.size(), ans = 0;
    
        while( i<n && j<n)
        {
            if(set.find(s[j]) == set.end()) //If the character does not in the set
            {
                set.insert(s[j++]); //Insert the character in set and update the j counter
                ans = std::max(ans, j-i); //Check if the new distance is longer than the current answer
            }
            else
            {
                set.erase(s[i++]); 
                /*If character does exist in the set, ie. it is a repeated character, 
                we update the left side counter i, and continue with the checking for substring. */
            }
        }
    
        return ans;
    }
};

int main()
{
    Solution solObj1;
    std::string s1 = "abcabcbb";
    
    int ans = solObj1.lengthOfLongestSubstring(s1);
    std::cout<< ans << std::endl;
    
    return 0;
}

//  Sliding Window Solution O(n):

// class Solution {
// public:
//     int lengthOfLongestSubstring(string s) {
//         int n = s.size();
//         int l=0, r = n-1;
        
//         unordered_set<char> visited;
        
//         int maxStr = 0;

//         for(int r=0;r<n;r++)
//         {
//             if(visited.find(s[r])==visited.end())
//             {
//                 visited.insert(s[r]);
//                 maxStr = max(maxStr,r-l+1);
                
//             }
//             else
//             {
//                 while(l!=r && s[l]!=s[r])
//                     visited.erase(s[l++]);
                
//                 //Removing and adding the same element
//                 visited.erase(s[l++]);
//                 visited.insert(s[r]);
                
//                 maxStr = max(maxStr,r-l+1);
//             }
//         }
        
//         return maxStr;
//     }
// };
